@inject ApiUtil Api
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudTextField Label="Deck Name" Class="m-3" Variant="Variant.Outlined" @bind-Value="_newDeck.DeckName"/>
        <MudSpacer/>
        <MudTextField Label="Deck Url" Class="m-3" Variant="Variant.Outlined" @bind-Value="_newDeck.DeckUrl"/>
        <MudSpacer/>
        <MudColorPicker Label="Display Color" ValueChanged="(e) => { _newDeck.Color =  int.Parse(e.Value, System.Globalization.NumberStyles.HexNumber);}"/>
        <MudSpacer/>
        <MudAutocomplete T="ScryFallCard" Label="Commander" SearchFunc="GetCommanders" DebounceInterval="300" ValueChanged="CommanderChanged"/>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Close" Variant="Variant.Filled" Color="Color.Info">Close</MudButton>
        @if (_isLoading)
        {
            <MudProgressCircular Size="Size.Small" Color="Color.Primary" />
        }
        else
        {
            <MudButton OnClick="Create" Variant="Variant.Filled" Color="Color.Primary">Create</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }

    private bool _isLoading = false;
    
    private Deck _newDeck = new()
    {
        DeckName = string.Empty,
        DeckUrl = string.Empty,
        Color = 255,
        Commander = string.Empty
    };

    private async Task<IEnumerable<ScryFallCard>> GetCommanders(string query)
    {
        if (query.Length < 4)
        {
            return new List<ScryFallCard>();
        }
        return await Api.GetCommanders(query);
    }

    private async Task CommanderChanged(ScryFallCard commander)
    {
        _newDeck.Commander = commander.Name;
        _newDeck.ColorIdentity = commander.ColorIdentity;
    }

    private async Task Create()
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

        if (!_newDeck.IsValid())
        {
            Snackbar.Add("Deck is not valid! Please ensure all fields are populated.", Severity.Error);
            return;
        }

        try
        {
            _isLoading = true;
            await Api.CreateDeck(_newDeck);
            Snackbar.Add("Deck created!", Severity.Success);
            Close();
        }
        catch (Exception e)
        {
            Snackbar.Add($"An error occured!\n{e.Message}");
        }
        finally
        {
            _isLoading = false;
        }
        
    }
    
    private void Close() => MudDialog.Cancel();
}